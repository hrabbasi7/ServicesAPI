package com.i2c.schedulerframework.dao;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.i2c.schedulerframework.util.CommonUtilities;
import com.i2c.schedulerframework.util.Constants;

import com.i2c.schedulerframework.dao.BaseDAO;
import com.i2c.schedulerframework.FTPService.FTPInfoVO;
import com.i2c.schedulerframework.excep.LoadInfoExcep;
import java.util.Vector;
import com.i2c.schedulerframework.util.LabelValueBean;
import java.util.logging.Logger;
import com.i2c.schedulerframework.model.PayeeInfoVO;
import com.i2c.utils.logging.I2cLogger;

public class PayeeServiceDAO
    extends BaseDAO {

  private String instanceID = null;
  private Connection dbConn = null;
  private Logger lgr = null;

  public PayeeServiceDAO(String instanceID, Connection dbConn, Logger lgr) {
    this.instanceID = instanceID;
    this.dbConn = dbConn;
    this.lgr = lgr;
  }

  public boolean checkScheduleTime() {
    boolean schTime = false;

    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {

      lgr.log(I2cLogger.FINEST,
              "PayeeServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time ");
      query.append(
          "select pyee_last_up_on||' '||payee_cutover_time payee_time from bp_processors");
      query.append(" where (pyee_last_up_on < ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" or (pyee_last_up_on = ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" and payee_cutover_time <= ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatTime(Constants.EOD_TIME_FORMAT_MIN), true);
      query.append(" )) and is_active = 'Y'");
      query.append(" order by payee_time ");

      lgr.log(I2cLogger.INFO,
              "PayeeServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query--->" +
              query);

      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());

      lgr.log(I2cLogger.CONFIG,
              "PayeeServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" +
              rs);

      if (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          lgr.log(I2cLogger.FINEST,
                  "PayeeServiceDAO --- Response File Schedule Time Arrived --- Found Response File Processing Schedule Date Time--->" +
                  rs.getString(1));
          schTime = true;
        }
      }
    }
    catch (Exception ex) {
      lgr.log(I2cLogger.WARNING,
              "PayeeServiceDAO --- checkScheduleTime ---  Exception in checking Schedule Date Time -->" +
              ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return schTime;
  }

  public void updateNextSchedule() {
    StringBuffer query = new StringBuffer();
    String newDate = null;
    Statement stmt = null;

    try {
      lgr.log(I2cLogger.FINEST,
              "PayeeServiceDAO --- Method for updating batch schedule date --- ");
      newDate = CommonUtilities.addDaysInDate(Constants.DATE_FORMAT,
                                              CommonUtilities.
                                              getCurrentFormatDate(
                                              Constants.DATE_FORMAT)
                                              , "1", Constants.DATE_FORMAT);
      query.append("update bp_processors set pyee_last_up_on = ");
      CommonUtilities.buildQueryInfo(query, newDate, true);

      stmt = dbConn.createStatement();

      lgr.log(I2cLogger.FINEST,
              "PayeeServiceDAO --- Going to execute the Query for updating response schedule date --->" +
              query);

      stmt.executeUpdate(query.toString());

      lgr.log(I2cLogger.FINEST,
              "PayeeServiceDAO --- Query for updating batch schedule date executed successfully--->");
    }
    catch (Exception ex) {

      lgr.log(I2cLogger.WARNING,
              "PayeeServiceDAO --- Excpetion in updating batch schedule date-->" +
              ex);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
  }

  /**
   *
   */
  public FTPInfoVO getPayeeFtpInfo() {
    boolean schTime = false;
    FTPInfoVO ftpVo = null;
    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {

      lgr.log(I2cLogger.FINEST,
              "PayeeServiceDAO --- getResponseFtpInfo ---  Method for checking Schedule Date Time ");

      query.append("select pd_sftp_address, pd_sftp_port, pd_sftp_userid, pd_sftp_password,");
      query.append(" pd_sftp_path, pd_sftp_locpath, pd_sftp_is_pgp, pd_sftp_is_zip, ");
      query.append(" pd_sftp_allow, payeefile_prefix, payeefile_postfix, scheme_id, gen_null_file");
      query.append(" from bp_processors");
      query.append(" where is_active = 'Y'");
//      query.append(" and pd_sftp_allow = 'Y' ");


      lgr.log(I2cLogger.INFO,
              "PayeeServiceDAO --- getPayeeFtpInfo ---  Method for checking Schedule Date Time --- Query--->" +
              query);
      System.out.print("getPayeeFtpInfo---->" + query.toString());
      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());
      ftpVo = new FTPInfoVO();

      lgr.log(I2cLogger.CONFIG,
              "PayeeServiceDAO --- getResponseFtpInfo ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" +
              rs);

      while (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpAddress(rs.getString(1));
        }
        if (rs.getString(2) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPort(rs.getString(2));
        }
        if (rs.getString(3) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpUserId(rs.getString(3));
        }
        if (rs.getString(4) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPassword(rs.getString(4));
        }
        if (rs.getString(5) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpRemotePath(rs.getString(5));
        }
        if (rs.getString(6) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpLocalPath(rs.getString(6));
        }
        if (rs.getString(7) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsPgp(rs.getString(7));
        }
        if (rs.getString(8) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsZip(rs.getString(8));
        }
        if (rs.getString(9) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsFtpAllowed(rs.getString(9));
        }
        if (rs.getString(10) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePreFix(rs.getString(10));
        }
        if (rs.getString(11) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePostFix(rs.getString(11));
        }
        if (rs.getString(12) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setSchemeId(rs.getString(12));
        }
        if (rs.getString(13) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsNullFile(rs.getString(13));
        }
      }
    }
    catch (Exception ex) {
      lgr.log(I2cLogger.WARNING,
              "PayeeServiceDAO --- getResponseFtpInfo ---  Exception in checking Schedule Date Time -->" +
              ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return ftpVo;
  }

  /**
   * Method Name: fetchNextSchedule
   * Description: This method fetches the next schedule info (bussiness date,
   *              cutovertime) from the bp_processors table.
   * Parameters:  NONE
   * @return AdjustmentInfoVO
   * @throws LoadInfoExcep
   */
  public PayeeInfoVO fetchNextSchedule() throws LoadInfoExcep {
    PayeeInfoVO nextInfo = null;
    StringBuffer query = new StringBuffer();
    Vector records = null;
    LabelValueBean lbv = null;

    lgr.log(I2cLogger.FINE,
            "PayeeServiceDAO --- Method Name: fetchNextSchedule ");
    try {
      query.append("select pyee_last_up_on||' '||payee_cutover_time payee_cut_time, processor_abrv from bp_processors order by payee_cut_time");

      lgr.log(I2cLogger.FINE,
              "PayeeServiceDAO --- Method Name: fetchNextSchedule --- query for fetching next schedule time---> " +
              query);

      records = getKeyValuePairs(query.toString(), dbConn);

      lgr.log(I2cLogger.FINE,
              "PayeeServiceDAO --- Method Name: fetchNextSchedule --- query result size---> " +
              records.size());
      if (records.size() > 0) {
        lbv = (LabelValueBean) records.elementAt(0);
        nextInfo = new PayeeInfoVO();
        nextInfo.setCurrentDateTime(CommonUtilities.getCurrentFormatDateTime(
            Constants.EOD_DATE_TIME_FORMAT));
        nextInfo.setScheduledDateTime(lbv.getValue().trim());
        nextInfo.setTimeDifference(CommonUtilities.calculateTimeDifference(
            nextInfo.getCurrentDateTime(), nextInfo.getScheduledDateTime(),
            Constants.EOD_DATE_TIME_FORMAT));

        lgr.log(I2cLogger.FINE,
                "PayeeServiceDAO --- Method Name: fetchNextSchedule --- PayeeInfoVO attribute values---> --ScheduledDateTime--: " +
                nextInfo.getScheduledDateTime() + " --CurrentDateTime--: " +
                nextInfo.getCurrentDateTime() + " --TimeDifference--: " +
                nextInfo.getTimeDifference());
      }
    }
    catch (Exception e) {
      lgr.log(I2cLogger.SEVERE,
              "PayeeServiceDAO:---  Exception in fetching next schedule-->: " +
              e);
      throw new LoadInfoExcep( -1,
                              "Exception in fetching next Schedule Info for Response Scheduler---> " +
                              e);
    }
    return nextInfo;
  }
}
