package com.i2c.schedulerframework.dao;

import com.i2c.schedulerframework.main.MainServiceRunner;
/**
 * <p>Title: Generic Scheduler Framework</p>
 *
 * <p>Description: </p>
 *
 * <p>Copyright: Copyright (c) 2006</p>
 *
 * <p>Company: i2cinc</p>
 *
 * @author hrabbasi
 * @version 1.0
 */
import java.sql.*;
import java.util.*;
import com.i2c.schedulerframework.util.*;
import com.i2c.schedulerframework.util.*;
import com.i2c.schedulerframework.excep.*;
import com.i2c.schedulerframework.main.MainServiceRunner;
import com.i2c.utils.logging.I2cLogger;
import com.i2c.schedulerframework.model.LabelValueBean;
import java.util.logging.Logger;
import java.io.File;

public abstract class BaseDAO
    implements BaseDAOI {

  private static Logger baseLogger = null;
//  private Connection dbConn = null;
//
//  public BaseHome(Connection dbConn){
//    this.dbConn = dbConn;
//  }
  public BaseDAO() {
    this.baseLogger = I2cLogger.getInstance(BaseConstants.LOG_FILE_PATH +
                                            File.separator +
                                            "BaseDAO" + "-%g.log",
                                            BaseConstants.LOG_FILE_SIZE,
                                            BaseConstants.LOG_FILE_NO,
                                            BaseConstants.LOG_CONTEXT_NAME);

  }

  public BaseDAO(Logger lgr) {
    this.baseLogger = lgr;
  }

  /**
   * Method for Retrive the information from the database (select Statment) using prepare Statement
   * @param savequery: query for execution insert or update or delete
   * @param dbConn:connection object for executing query
   * @return the last serial number inserted
   */
  public ResultSet selectPreparedStmt(PreparedStatement preparedStatement) throws
      DatabaseExcep {
    ResultSet stmtRSReturn = null;
    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[selectPreparedStmt] Start Query for Retrieve values using Prepare Statement");
    try {
      stmtRSReturn = preparedStatement.executeQuery();
      baseLogger.log(I2cLogger.INFO,
                     "[BaseDAO].[selectPreparedStmt] Select-PrepareStatement Executed Sucessfully");
    }
    catch (SQLException sqle) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[selectPreparedStmt] SQLException in Reterive values from database using PrepareStmt---> " +
                     sqle);
      sqle.printStackTrace();
      //Throw the Exception
      throw new DatabaseExcep(sqle.getErrorCode(), sqle);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[selectPreparedStmt] Exception in Retrieve values from database using PrepareStmt---> " +
                     e);
      e.printStackTrace();
      //Throw the Exception
      throw new DatabaseExcep(e);
    }
    finally {
      try {
        if (preparedStatement != null)
          preparedStatement.close();
      }
      catch (Exception ex) {}
    } //end finally
    return stmtRSReturn;
  } //End store Values method

  /**
   * Method for inserting the information into the database (Save Changes) using
   * prepare Statement
   * @param preparedStatement: preparedStatement containg query for execution insert or update or delete
   * @return the status of insert and updated or any query
   *  > 0 mean insert / updated no of rows
   *  0 mean any other
   */
  public int insertUpdatePreparedStmt(PreparedStatement preparedStatement) throws
      InsertValuesExcep {
    int stmtReturn = -1;
    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[insertUpdatePreparedStmt] Start Query for Insert or Update values using Prepare Statement");
    try {
      stmtReturn = preparedStatement.executeUpdate();
      if (stmtReturn > 0) {
        baseLogger.log(I2cLogger.INFO,
                       "[BaseDAO].[insertUpdatePreparedStmt] Insert / Update PrepareStatement Executed Sucessfully");
      }
      else if (stmtReturn == 0) {
        baseLogger.log(I2cLogger.INFO,
                       "[BaseDAO].[insertUpdatePreparedStmt] PrepareStatement Executed Sucessfully that return Nothing");
      }
    }
    catch (SQLException sqle) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[insertUpdatePreparedStmt] SQLException in Insert / Update values in database using PrepareStmt---> " +
                     sqle);
      sqle.printStackTrace();
      //Throw the Exception
      throw new InsertValuesExcep(sqle.getErrorCode(), sqle);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[insertUpdatePreparedStmt] Exception in Insert / Update values in database using PrepareStmt---> " +
                     e);
      e.printStackTrace();
      //Throw the Exception
      throw new InsertValuesExcep(e);
    }
    finally {
      try {
        if (preparedStatement != null)
          preparedStatement.close();
      }
      catch (Exception ex) {}
    } //end finally
    return stmtReturn;
  } //End store Values method

  /**
   * Method for inserting the information into the database (Save Changes)
   * @param savequery: query for execution insert or update or delete
   * @param dbConn:connection object for executing query
   * @return the last serial number inserted
   */
  public long insertValues(String queryString, Connection dbConn) throws
      InsertValuesExcep {
    long serialNo = -1;
    Statement smt = null;
    String serialQuery = "";
    boolean flag = true;
    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[insertValues] Query for inseting values -->\n" +
                   queryString);
    try {
      smt = dbConn.createStatement();
      smt.executeUpdate(queryString);
      smt.close();

      //Getting the serial number condition
      if (queryString.indexOf(BaseConstants.INSERT_QUERY_INTO_VALUE) > -1) {
        serialQuery = BaseConstants.SERIAL_QUERY + " " +
            queryString.substring(
                queryString.indexOf(BaseConstants.INSERT_QUERY_INTO_VALUE) +
                BaseConstants.INSERT_QUERY_INTO_VALUE.length(),
                queryString.indexOf(BaseConstants.
                                    INSERT_QUERY_COLUMN_START_VALUE));
        baseLogger.log(I2cLogger.FINE,
                       "[BaseDAO].[insertValues] Serail Number Query -->\n" +
                       serialQuery);
        serialNo = getMaxValue(serialQuery, dbConn) - 1;
      } //end serial number if

      baseLogger.log(I2cLogger.FINE,
                     "[BaseDAO].[insertValues] Serail Number for insert record -->\n" +
                     serialNo);
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[insertValues] SQLException in storing values in database ---> " +
                     e);
      serialNo = -1;
      //Throw the Exception
      throw new InsertValuesExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[insertValues] Exception in storing values in database ---> " +
                     e);
      flag = false;
      //Throw the Exception
      throw new InsertValuesExcep(e);
    }
    finally {
      try {
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    return serialNo;
  } //End store Values method

  /**
   * Method for updating the database (Save Changes)
   * @param savequery: query for execution insert or update or delete
   * @param dbConn:connection object for executing query
   * @return false if query fail to execute
   */
  public boolean storeValues(String savequery, Connection dbConn) throws
      StoreValuesExcep {

    Statement smt = null;
    boolean flag = true;
    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[storeValues] Query for storing values -->\n" +
                   savequery);
    try {
      smt = dbConn.createStatement();
      smt.executeUpdate(savequery);
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[storeValues] SQLException in storing values in database ---> " +
                     e);
      flag = false;
      //Throw the Exception
      throw new StoreValuesExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[storeValues] Exception in storing values in database ---> " +
                     e);
      flag = false;
      //Throw the Exception
      throw new StoreValuesExcep(e);
    }
    finally {
      try {
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    return flag;
  } //End store Values method

  /*
   * Getting the Reference Values from the database
   * @param queryString: query for getting the reference value in the key value pair
   * @param dbConn:connection object for executing query
   */
  public Vector getKeyValuePairs(String queryString, Connection dbConn) throws
      LoadKeyValuePairsExcep {

    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[getKeyValuePairs] Query for getting Key Value Pair ->\n" +
                   queryString);
    Vector refvalues = new Vector();
    LabelValueBean labelValueBean = null;
    Statement smt = null;
    ResultSet rs = null;
    try {
      smt = dbConn.createStatement();
      rs = smt.executeQuery(queryString);
      //Populating the Key Pair value
      while (rs.next()) {
        if (rs.getString(2) != null && rs.getString(1) != null) {
          labelValueBean = new LabelValueBean(rs.getString(2).trim(),
                                              rs.getString(1).trim());
          refvalues.addElement(labelValueBean);
        }
      } //end while
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getKeyValuePairs] SQLException in Getting Key Value Pair ----> " +
                     e);
      throw new LoadKeyValuePairsExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getKeyValuePairs] Exception in Getting Key Value Pair ----> " +
                     e);
      throw new LoadKeyValuePairsExcep(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    baseLogger.log(I2cLogger.FINER,
                   "[BaseDAO].[getKeyValuePairs]<-- Vector Size for getting Key Value Pair -->" +
                   refvalues.size());
    return refvalues;
  } //End Getting Key Pair Values from database Method

  /*
   * Getting the Single Reference Values from the database
   * @param queryString: query for getting the reference value in the key
   * @param dbConn:connection object for executing query
   */
  public Vector getKeyValues(String queryString, Connection dbConn) throws
      LoadKeyValuesExcep {

    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[getKeyValues] <--- Query for getting Key values -->\n" +
                   queryString);
    Vector refvalues = new Vector();
    Statement smt = null;
    ResultSet rs = null;

    try {
      smt = dbConn.createStatement();
      rs = smt.executeQuery(queryString);

      while (rs.next()) {
        if (rs.getString(1) != null)
          refvalues.addElement(rs.getString(1).trim());
        else
          refvalues.addElement("");
      } //end while
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getKeyValues] SQLException in Getting Key Values ----> " +
                     e);
      throw new LoadKeyValuesExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getKeyValues] Exception in Getting Key Values ----> " +
                     e);
      throw new LoadKeyValuesExcep(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    return refvalues;
  } //End Getting single reference Value from database Method

  /*
   * Checking the value already exist in the database or not
   * @param queryString: query for checking the duplication
   * @param dbConn:connection object for executing query
   */
  public boolean checkValueExist(String queryString, Connection dbConn) throws
      CheckValueExistExcep {

    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[checkValueExist]<-- Query for Checking Value Exist -->\n" +
                   queryString);
    boolean recordexist = false;
    Statement smt = null;
    ResultSet rs = null;
    try {
      smt = dbConn.createStatement();
      rs = smt.executeQuery(queryString);

      while (rs.next()) {
        if (rs.getInt(1) > 0)
          recordexist = true;
      } //end while
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[checkValueExist] SQLException in Checking Value Exist ----> " +
                     e);
      throw new CheckValueExistExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[checkValueExist] Exception in Checking Value Exist ----> " +
                     e);
      throw new CheckValueExistExcep(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    return recordexist;
  } //End check Exist Method

  /*
   * Checking the getting the maximum sequence counter value
   * @param queryString: query for getting the maximum value
   * @param dbConn:connection object for executing query
   */
  public long getMaxValue(String queryString, Connection dbConn) throws
      GetMaxValueExcep {
    baseLogger.log(I2cLogger.CONFIG,
                   "[BaseDAO].[getMaxValue] <-- Query for getting the Max value -->\n" +
                   queryString);
    Statement smt = null;
    ResultSet rs = null;
    long seqcount = 1;
    try {
      smt = dbConn.createStatement();
      rs = smt.executeQuery(queryString);

      if (rs.next()) {
        seqcount = rs.getLong(1) + 1;
      } //end if
    }
    catch (SQLException e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getMaxValue] SQLException in Getting Maximum Sequence Counter ----> " +
                     e);
      throw new GetMaxValueExcep(e.getErrorCode(), e);
    }
    catch (Exception e) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[getMaxValue] Exception in Getting Maximum Sequence Counter ----> " +
                     e);
      throw new GetMaxValueExcep(e);
    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (smt != null)
          smt.close();
      }
      catch (Exception ex) {}
    } //end finally
    return seqcount;
  } //End Getting Sequence Counter Value from database Method

  /**
   * This method tests whether the processing of Schedule Services is allowed or not.
   * @param dbConn Connection columnName (name of the db column to examine), instanceName
   * @param serviceName String
   * @return boolean (indicating service allowed or not)
   * @throws SQLException
   */
  public boolean processScheduler(String serviceName, Connection dbConn) throws
      SQLException {
    boolean useServcieFlag = true;
    StringBuffer query = new StringBuffer();

    baseLogger.log(I2cLogger.FINEST,
                   "[BaseDAO].[processScheduler-dbConn] Process Scheduler Method ");
    baseLogger.log(I2cLogger.FINEST,
                   " Scheduler Service Name " + serviceName);
    try {
      query.append(
          "select is_allowed from scheduler_services where service_name = ");
      CommonUtilities.buildQueryInfo(query, serviceName, true);
      baseLogger.log(I2cLogger.FINEST,
                     "[BaseDAO].[processScheduler-dbConn] Query for Process Scheduler Service-->" +
                     query);
      Vector retVal = this.getKeyValues(query.toString(), dbConn);
      baseLogger.log(I2cLogger.FINEST,
                     "[BaseDAO].[processScheduler-dbConn] ResultSet Size  -->" +
                     retVal.size());
      if (retVal.size() > 0) {
        String strVal = retVal.elementAt(0).toString();
        if (strVal.equalsIgnoreCase(BaseConstants.IS_TRUE)) {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler-dbConn] Value Found for specified service -->" +
                         BaseConstants.IS_TRUE);
          return useServcieFlag;
        }
        else if (strVal.equalsIgnoreCase(BaseConstants.IS_FALSE)) {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler-dbConn] Use_Scheduler_Service Value --> " +
                         BaseConstants.IS_FALSE);
          useServcieFlag = false;
        }
        else {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler-dbConn] Use_Scheduler_Service Value --> NULL");
          return useServcieFlag;
        }
      }
      else {
        baseLogger.log(I2cLogger.FINEST,
                       "[BaseDAO].[processScheduler-dbConn] Unable to find the is_allowed value for specified service--->" +
                       serviceName);
        return false;
      }
    }
    catch (Exception ex) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[processScheduler-dbConn] Exception in Process Scheduler Method-- > " +
                     ex);
      ex.printStackTrace();
      useServcieFlag = false;
    }
    return useServcieFlag;
  } //end processScheduler method

  /**
   * Method
   * @param serviceName String
   * @param instanceName String
   * @return boolean
   * @throws SQLException
   */
  public boolean processScheduler(String serviceName, String instanceName) throws
      SQLException {
    boolean useServcieFlag = true;
    StringBuffer query = new StringBuffer();
    Connection dbConn = null;
    baseLogger.log(I2cLogger.FINEST,
                   "[BaseDAO].[processScheduler] Process Scheduler Method ");
    baseLogger.log(I2cLogger.FINEST,
                   "[BaseDAO].[processScheduler] Scheduler Service Name " +
                   serviceName);
    try {
      query.append(
          "select is_allowed from scheduler_services where service_name = ");
      CommonUtilities.buildQueryInfo(query, serviceName, true);
      baseLogger.log(I2cLogger.FINEST,
                     "[BaseDAO].[processScheduler] Query for Process Scheduler Service-->" +
                     query);
      dbConn = DatabaseConnectionUtil.getConnection(
          "[BaseDAO].[processScheduler]", instanceName, baseLogger);
      Vector retVal = this.getKeyValues(query.toString(), dbConn);
      baseLogger.log(I2cLogger.FINEST,
                     " ResultSet Size  -->" + retVal.size());
      if (retVal.size() > 0) {
        String strVal = retVal.elementAt(0).toString();
        if (strVal.equalsIgnoreCase(BaseConstants.IS_TRUE)) {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler] Value Found for specified service -->" +
                         BaseConstants.IS_TRUE);
          return useServcieFlag;
        }
        else if (strVal.equalsIgnoreCase(BaseConstants.IS_FALSE)) {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler] Use_Scheduler_Service Value --> " +
                         BaseConstants.IS_FALSE);
          useServcieFlag = false;
        }
        else {
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseDAO].[processScheduler] Use_Scheduler_Service Value --> NULL");
          return useServcieFlag;
        }
      }
      else {
        baseLogger.log(I2cLogger.FINEST,
                       "[BaseDAO].[processScheduler] Unable to find the is_allowed value for specified service--->" +
                       serviceName);
        return false;
      }
    }
    catch (Exception ex) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseDAO].[processScheduler] Exception in Process Scheduler Method-- > " +
                     ex);
      ex.printStackTrace();
      useServcieFlag = false;
    }
    finally {
      if (dbConn != null) {
        dbConn.close();
      }
    }
    return useServcieFlag;
  } //end processScheduler method

  /**
   * Method for validating the passed connection
   * @param dbConn Connection
   * @param counter int
   * @param instanceName String
   * @throws ProcessValuesExcep
   * @return Connection
   */

  public Connection verfiyConnection(int counter,
                                     String instanceName,
                                     Connection dbConn) throws
      ProcessValuesExcep {
    Statement stmt = null;
    ResultSet rs = null;
    try {
      baseLogger.log(I2cLogger.FINEST,
                     "[BaseHome].[verfiyConnection] <-- Verfiy Connection Method --- Arguments Received --- Connection ---> " +
                     dbConn + " Counter ---> " + counter +
                     " InstanceName -->" + instanceName);
      String query = "select * from system_variables";
      //Checking teh connection validatiy loop
      for (int i = 0; i < counter; i++) {
        baseLogger.log(I2cLogger.FINEST,
                       "[BaseHome].[verfiyConnection] Loop Checking Connection counter --->" +
                       counter + "<--- i ---->" +
                       i);
        try {

          baseLogger.log(I2cLogger.FINEST,
                         "[BaseHome].[verfiyConnection] Creating Statment Object---");
          stmt = dbConn.createStatement();
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseHome].[verfiyConnection] Executing Query---");
          rs = stmt.executeQuery(query);
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseHome].[verfiyConnection] Connection is valid -- Closing ResultSet");
          //Closing the valid statment
          rs.close();
          stmt.close();
          baseLogger.log(I2cLogger.FINEST,
                         " BaseHome --- Verfiy Connection --- Connection is valid -- Breaking Loop");
          break;
        }
        catch (Exception ex) {
          baseLogger.log(I2cLogger.WARNING,
                         "[BaseHome].[verfiyConnection] Cuurent Count -->" +
                         i + "<--- Counter -1 -->" +
                         (counter - 1) +
                         "--- verfiyConnection --- Exception in Validating/Verifying Connection ---->" +
                         ex);

          //Terminate the method the retry connection counter value has exceeded
          if (i == counter - 1)
            throw new ProcessValuesExcep( -1,
                                         "Invalid Database Connection--->" + ex);
          baseLogger.log(I2cLogger.FINEST,
                         "[BaseHome].[verfiyConnection] Creating new Connection --- Argumnets passed to DatabaseHandler.getConnection --- ClassName---> BaseHome -- InstanceName--->" +
                         instanceName);

          //Close exisiting dump connection
          try {
            baseLogger.log(I2cLogger.
                           FINEST,
                           "[BaseHome].[verfiyConnection] Closing existing dump connetion --->");
            if (dbConn != null)
              DatabaseConnectionUtil.returnConnection("BaseHome", dbConn);
            dbConn = null;
          }
          catch (Exception e) {
            baseLogger.log(I2cLogger.WARNING,
                           "[BaseHome].[verfiyConnection] Exception in closing existing dump connection -->" +
                           e);
          } //end catch

          //Creat new databaase connection if exsiting connection have problems
          try {
            dbConn = DatabaseConnectionUtil.getConnection("BaseHome",
                instanceName, baseLogger);
          }
          catch (Exception ex1) {
            baseLogger.log(I2cLogger.WARNING,
                           "[BaseHome].[verfiyConnection] Exception in Creating New Connection --->" +
                           ex1);
          } //end catch
          baseLogger.log(I2cLogger.
                         WARNING,
                         "[BaseHome].[verfiyConnection] Got New DBConn--->" +
                         dbConn);
        } //end catch

      } // end for
    }
    catch (Exception mainExcep) {
      baseLogger.log(I2cLogger.WARNING,
                     "[BaseHome].[verfiyConnection] Exception in Verify Connetion method -->" +
                     mainExcep);
      throw new ProcessValuesExcep( -1,
                                   "[BaseHome].[verfiyConnection] Exception in Verify DB connection -->" +
                                   mainExcep.getMessage());

    }
    finally {
      try {
        if (rs != null)
          rs.close();
        if (stmt != null)
          stmt.close();
      }
      catch (Exception ex) {}
    } // end finally
    baseLogger.log(I2cLogger.FINEST,
                   " BaseHome --- verfiyConnection --- Returning valid DB Conneciton--->" +
                   dbConn.toString());
    return dbConn;
  } // end method

  /**
   * Method for validating the datbase connection object
   * @param con: connection object
   * @throws SQLException
   */

//public static void checkConnection(Connection con)
//          throws SQLException {
//        Statement smt = null;
//        ResultSet rs = null;
//         try {
//                ServiceMain.lgr.log(LogLevel.getLevel(CardsConstants.FINEST,"<------- Before Creating Ctatment from Connection  --->");
//                smt = con.createStatement();
//                ServiceMain.lgr.log(LogLevel.getLevel(CardsConstants.FINEST,"<------- Before Creating Resultset from Connection  --->");
//            rs = smt.executeQuery(" select currency_code  from system_variables ");
//                ServiceMain.lgr.log(LogLevel.getLevel(CardsConstants.FINEST,"<------- After Closing Stmt and ResultSet  --->");
//             rs.close();
//                smt.close();
//         } catch(Exception e) {
//                throw new SQLException("Invalid Connection");
//         } finally {
//                 try {
//                         if (rs != null )
//                                 rs.close();
//                         if (smt != null)
//                             smt.close();
//                 } catch (Exception e){}//end catch
//         }//end finally
//  }//end check Conenction Method

} //end class
