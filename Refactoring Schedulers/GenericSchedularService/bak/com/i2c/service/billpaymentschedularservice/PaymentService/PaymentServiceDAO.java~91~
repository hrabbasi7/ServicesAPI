package com.i2c.service.billpaymentschedularservice.PaymentService;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.i2c.service.util.CommonUtilities;
import com.i2c.service.util.Constants;
import com.i2c.service.util.LogLevel;
import com.i2c.service.util.DatabaseHandler;

import com.i2c.service.base.BaseHome;
import com.i2c.service.billpaymentschedularservice.FTPService.FTPInfoVO;
import com.i2c.service.billpaymentschedularservice.ServiceMain;
import com.i2c.service.excep.LoadInfoExcep;
import java.util.Vector;
import com.i2c.service.util.LabelValueBean;
import java.util.logging.Logger;

class PaymentServiceDAO
    extends BaseHome {

  private String instanceID = null;
  private Connection dbConn = null;
  private Logger lgr = null;

  PaymentServiceDAO(String instanceID, Connection dbConn, Logger lgr) {
    this.instanceID = instanceID;
    this.dbConn = dbConn;
    this.lgr = lgr;
  }

  boolean checkScheduleTime() {
    boolean schTime = false;

    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time ");
      query.append(
          "select pymt_last_up_on||' '||cutover_time pay_time from bp_processors");
      query.append(" where (pymt_last_up_on < ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" or (pymt_last_up_on = ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" and cutover_time <= ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatTime(Constants.
          EOD_TIME_FORMAT_MIN), true);
      query.append(" )) and is_active = 'Y'");
      query.append(" order by pay_time ");
      lgr.log(LogLevel.getLevel(Constants.LOG_INFO),
              "PaymentServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query--->" +
              query);

      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());
      lgr.log(LogLevel.getLevel(Constants.LOG_CONFIG),
              "PaymentServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" +
              rs);

      if (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
                  "PaymentServiceDAO --- Payment File Schedule Time Arrived --- Found Payment File Processing Schedule Date Time--->" +
                  rs.getString(1));
          schTime = true;
        }
      }
    }
    catch (Exception ex) {
      lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
              "PaymentServiceDAO --- checkScheduleTime ---  Exception in checking Schedule Date Time -->" +
              ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return schTime;
  }

  void updateNextSchedule() {
    StringBuffer query = new StringBuffer();
    String newDate = null;
    Statement stmt = null;

    try {
      lgr.log(
          LogLevel.getLevel(Constants.LOG_FINEST),
          "PaymentServiceDAO --- Method for updating batch schedule date --- ");
      newDate = CommonUtilities.addDaysInDate(Constants.DATE_FORMAT,
                                              CommonUtilities.
                                              getCurrentFormatDate(Constants.
          DATE_FORMAT), "1", Constants.DATE_FORMAT);
      query.append("update bp_processors set pymt_last_up_on = ");
      CommonUtilities.buildQueryInfo(query, newDate, true);

      stmt = dbConn.createStatement();
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO --- Going to execute the Query for updating payment schedule date --->" +
              query);
      stmt.executeUpdate(query.toString());
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO --- Query for updating batch schedule date executed successfully--->");
    }
    catch (Exception ex) {
      lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
              "PaymentServiceDAO --- Excpetion in updating batch schedule date-->" +
              ex);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
        lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
                "PaymentServiceDAO --- Excpetion in Finally block unable to close statment-->" +
                ex1);

      }
    }
  }

  /**
   * get the FTP related information for Payment File
   */
  FTPInfoVO getPaymentFtpInfo() {
//        boolean schTime = false;
    FTPInfoVO ftpVo = null;
    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO --- getPaymentFtpInfo ---  Method for checking Schedule Date Time ");

      query.append(
          "select td_sftp_address, td_sftp_port, td_sftp_userid, td_sftp_password,");
      query.append(
          " td_sftp_path, td_sftp_locpath, td_sftp_is_pgp, td_sftp_is_zip, td_sftp_allow,");
      query.append(
          " payfile_prefix, payfile_postfix, scheme_id, gen_null_file, pgp_pass_phrase");
      query.append(" from bp_processors");
      query.append(" where is_active = 'Y'");
      //            query.append(" and td_sftp_allow = 'Y' ");

      lgr.log(LogLevel.getLevel(Constants.LOG_INFO),
              "PaymentServiceDAO --- getPaymentFtpInfo ---\n" +
              "Method for checking Schedule Date Time --- Query--->" +
              query.toString());

      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());
      ftpVo = new FTPInfoVO();
      lgr.log(LogLevel.getLevel(Constants.LOG_CONFIG),
              "PaymentServiceDAO --- getPaymentFtpInfo ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" +
              rs);

      while (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpAddress(rs.getString(1));
        }
        if (rs.getString(2) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPort(rs.getString(2));
        }
        if (rs.getString(3) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpUserId(rs.getString(3));
        }
        if (rs.getString(4) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPassword(rs.getString(4));
        }
        if (rs.getString(5) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpRemotePath(rs.getString(5));
        }
        if (rs.getString(6) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpLocalPath(rs.getString(6));
        }
        if (rs.getString(7) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsPgp(rs.getString(7));
        }
        if (rs.getString(8) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsZip(rs.getString(8));
        }
        if (rs.getString(9) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsFtpAllowed(rs.getString(9));
        }
        if (rs.getString(10) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePreFix(rs.getString(10));
        }
        if (rs.getString(11) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePostFix(rs.getString(11));
        }
        if (rs.getString(12) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setSchemeId(rs.getString(12));
        }
        if (rs.getString(13) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsNullFile(rs.getString(13));
        }
        if (rs.getString(14) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setPgpPassPhrase(rs.getString(14));
        }

      }
    }
    catch (Exception ex) {
      lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
              "PaymentServiceDAO --- getPaymentFtpInfo ---  Exception in checking Schedule Date Time -->" +
              ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return ftpVo;
  }

  /*
   -----------------------------------------------------------------------------
      Method Name: fetchNextSchedule
      Description: This method fetches the next schedule info (bussiness date,
              cutovertime) from the bp_processors table.
      Parameters:  NONE
      Return Value: PaymentInfoVO
      Exceptions: LoadInfoExcep
   -----------------------------------------------------------------------------
   */
  public PaymentInfoVO fetchNextSchedule() throws LoadInfoExcep {
    PaymentInfoVO nextInfo = null;
    StringBuffer query = new StringBuffer();
//    Statement stmt = null;
//    ResultSet rs = null;
    Vector records = null;
    LabelValueBean lbv = null;

    lgr.log(LogLevel.getLevel(Constants.LOG_FINE),
            "PaymentServiceDAO --- Method Name: fetchNextSchedule ");
    try {
//      dbConn = DatabaseHandler.getConnection("PaymentServiceDAO",instanceID);
      query.append("select pymt_last_up_on||' '||cutover_time pay_cut_time, processor_abrv  from bp_processors order by pay_cut_time");
      lgr.log(LogLevel.getLevel(Constants.LOG_FINE),
              "PaymentServiceDAO --- Method Name: fetchNextSchedule --- query for fetching next schedule time---> " +
              query);

//      stmt = dbConn.createStatement();
//      rs = stmt.executeQuery(query.toString());

      records = getKeyValuePairs(query.toString(), dbConn);
      lgr.log(LogLevel.getLevel(Constants.LOG_FINE),
              "PaymentServiceDAO --- Method Name: fetchNextSchedule --- query result size---> " +
              records.size());
      if (records.size() > 0) {
        lbv = (LabelValueBean) records.elementAt(0);
        nextInfo = new PaymentInfoVO();
        nextInfo.setCurrentDateTime(CommonUtilities.getCurrentFormatDateTime(
            Constants.EOD_DATE_TIME_FORMAT));
        nextInfo.setScheduledDateTime(lbv.getValue().trim());
        nextInfo.setTimeDifference(CommonUtilities.calculateTimeDifference(
            nextInfo.getCurrentDateTime(), nextInfo.getScheduledDateTime(),
            Constants.EOD_DATE_TIME_FORMAT));
        lgr.
            log(LogLevel.getLevel(Constants.LOG_FINE),
                "PaymentServiceDAO --- Method Name: fetchNextSchedule --- PaymentInfoVO attribute values---> --ScheduledDateTime--: " +
                nextInfo.getScheduledDateTime() + " --CurrentDateTime--: " +
                nextInfo.getCurrentDateTime() + " --TimeDifference--: " +
                nextInfo.getTimeDifference());
      }
    }
    catch (Exception e) {
      lgr.
          log(LogLevel.getLevel(Constants.LOG_SEVERE),
              "PaymentServiceDAO:---  Exception in fetching next schedule-->: " +
              e);
      throw new LoadInfoExcep( -1,
                              "Exception in fetching next Schedule Info for Payment Scheduler---> " +
                              e);
    }
    return nextInfo;
  }

  public void updatePaymentStatus(String payFileSrNo) {
    StringBuffer query = new StringBuffer();
    Statement stmt = null;

    try {
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO -- updatePaymentStatus -- Method for updating Status of the batch file ");

      query.append("update bp_batch_files set bp_file_status = '" +
                   Constants.SENT_PAYMENT_FILE_STATUS + "'");
      query.append(" where bp_file_sr_no = ");
      CommonUtilities.buildQueryInfo(query, payFileSrNo, true);

      stmt = dbConn.createStatement();
      lgr.log(LogLevel.getLevel(Constants.LOG_INFO),
              "PaymentServiceDAO -- updatePaymentStatus -- Going to execute the Query for updating payment file Status --->" +
              query.toString());
      stmt.executeUpdate(query.toString());
      lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
              "PaymentServiceDAO -- updatePaymentStatus -- Query for updating Payment File Status executed successfully--->");
    }
    catch (Exception ex) {
      lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
              "PaymentServiceDAO -- updatePaymentStatus --  Excpetion in updating Payment File Status in (bp_batch_files)-->" +
              ex);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
        lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
                "PaymentServiceDAO -- updatePaymentStatus -- Excpetion in Finally block unable to close statment-->" +
                ex1);

      }
    }
  }

  /**
   * get the Payment Sleep Time for intrvels
   *
   */
  boolean paymentSleepTime(String processor_id) {
      boolean schTime = false;

      StringBuffer query = new StringBuffer();
      Statement stmt = null;
      ResultSet rs = null;

      try {
        lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
                "PaymentServiceDAO --- paymentSleepTime ---  Method for checking PaymentSleepTime ");
        query.append(
            "select pmnt_rtry_mins paymentSleepTime from bp_processors");
        query.append(" where processor_id = ");
        CommonUtilities.buildQueryInfo(query, processor_id, true);
        lgr.log(LogLevel.getLevel(Constants.LOG_INFO),
                "PaymentServiceDAO --- paymentSleepTime --- Query--->" +
                query);

        stmt = dbConn.createStatement();
        rs = stmt.executeQuery(query.toString());
        lgr.log(LogLevel.getLevel(Constants.LOG_CONFIG),
                "PaymentServiceDAO --- paymentSleepTime ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" +
                rs);

        if (rs.next()) {
          if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
            lgr.log(LogLevel.getLevel(Constants.LOG_FINEST),
                    "PaymentServiceDAO --- PaymentSleepTime in the DB is ---> " +
                    rs.getString(1));
            Constants.PAYMENT_SLEEP_TIME = Long.parseLong(rs.getString(1));
//            schTime = true;
          }
        }
      }
      catch (Exception ex) {
        lgr.log(LogLevel.getLevel(Constants.LOG_WARNING),
                "PaymentServiceDAO --- paymentSleepTime ---  Exception in checking Schedule Date Time -->" +
                ex);
      }
      finally {
        try {
          if (rs != null) {
            rs.close();
            rs = null;
          }
          if (stmt != null) {
            stmt.close();
            stmt = null;
          }
        }
        catch (SQLException ex1) {
        }
      }
      return schTime;
  }

}
