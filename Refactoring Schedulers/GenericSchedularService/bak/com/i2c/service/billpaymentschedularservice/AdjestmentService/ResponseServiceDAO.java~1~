package com.i2c.service.billpaymentschedularservice.ResponseService;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.i2c.service.util.CommonUtilities;
import com.i2c.service.util.Constants;
import com.i2c.service.util.LogLevel;
import com.i2c.service.util.DatabaseHandler;

import com.i2c.service.base.BaseHome;
import com.i2c.service.billpaymentschedularservice.FTPService.FTPInfoVO;

class ResponseServiceDAO extends BaseHome{

  private String instanceID = null;
  private Connection dbConn = null;

  ResponseServiceDAO(String instanceID, Connection dbConn) {
    this.instanceID = instanceID;
    this.dbConn = dbConn;
  }

  boolean checkScheduleTime() {
    boolean schTime = false;

    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_FINEST), "ResponseServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time ");
      query.append(
          "select rsp_last_up_on||' '||cutover_time pay_time from bp_processors");
      query.append(" where schedule_date < ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" or (schedule_date = ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatDate(Constants.DATE_FORMAT), true);
      query.append(" and cutover_time <= ");
      CommonUtilities.buildQueryInfo(query,
                                     CommonUtilities.
                                     getCurrentFormatTime(Constants.
          EOD_TIME_FORMAT_MIN), true);
      query.append(" ) order by pay_time ");
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_CONFIG), "ResponseServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query--->" + query);
      System.out.print("--***-->" + query.toString());
      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_CONFIG), "ResponseServiceDAO --- checkScheduleTime ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" + rs);

      if (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          CommonUtilities.getLogger(instanceID,
                                    Constants.RESPONSE_SERVICE).log(
              LogLevel.getLevel(Constants.LOG_FINEST),
              "ResponseServiceDAO --- Response File Schedule Time Arrived --- Found Response File Processing Schedule Date Time--->" +
              rs.getString(1));
          schTime = true;
        }
      }
    }
    catch (Exception ex) {
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_WARNING), "ResponseServiceDAO --- checkScheduleTime ---  Exception in checking Schedule Date Time -->" + ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return schTime;
  }

  void updateNextSchedule() {
    StringBuffer query = new StringBuffer();
    String newDate = null;
    Statement stmt = null;

    try {
      CommonUtilities.getLogger(instanceID,
                                Constants.RESPONSE_SERVICE).log(
          LogLevel.getLevel(Constants.LOG_FINEST),
          "ResponseServiceDAO --- Method for updating batch schedule date --- ");
      newDate = CommonUtilities.addDaysInDate(Constants.DATE_FORMAT,
                                              CommonUtilities.
                                              getCurrentFormatDate(Constants.
          DATE_FORMAT), "1", Constants.DATE_FORMAT);
      query.append("update bp_processors set rsp_last_up_on = ");
      CommonUtilities.buildQueryInfo(query, newDate, true);

      stmt = dbConn.createStatement();
      CommonUtilities.getLogger(instanceID,
                                Constants.RESPONSE_SERVICE).log(
          LogLevel.getLevel(Constants.LOG_FINEST),
          "ResponseServiceDAO --- Going to execute the Query for updating payment schedule date --->" + query);
      stmt.executeUpdate(query.toString());
      CommonUtilities.getLogger(instanceID,
                                Constants.RESPONSE_SERVICE).log(
          LogLevel.getLevel(Constants.LOG_FINEST),
          "ResponseServiceDAO --- Query for updating batch schedule date executed successfully--->");
    }
    catch (Exception ex) {
      CommonUtilities.getLogger(instanceID,
                                Constants.RESPONSE_SERVICE).log(
          LogLevel.getLevel(Constants.LOG_WARNING),
          "ResponseServiceDAO --- Excpetion in updating batch schedule date-->" +
          ex);
    }
    finally {
      try {
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
  }


  /**
   *
   */
  FTPInfoVO getResponseFtpInfo() {
    boolean schTime = false;
    FTPInfoVO ftpVo = null;
    StringBuffer query = new StringBuffer();
    Statement stmt = null;
    ResultSet rs = null;

    try {
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_FINEST), "ResponseServiceDAO --- getResponseFtpInfo ---  Method for checking Schedule Date Time ");
      query.append("select td_sftp_address, td_sftp_port, td_sftp_userid, td_sftp_password,");
      query.append(" td_sftp_path, td_sftp_locpath, td_sftp_is_pgp, td_sftp_allow, respfile_prefix,");
      query.append(" respfile_postfix, scheme_id, gen_null_file");
      query.append(" from bp_processors");
      query.append(" where is_active = 'Y' and td_sftp_allow = 'Y' ");

      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_CONFIG), "ResponseServiceDAO --- getResponseFtpInfo ---  Method for checking Schedule Date Time --- Query--->" + query);
      System.out.print("getResponseFtpInfo---->" + query.toString());
      stmt = dbConn.createStatement();
      rs = stmt.executeQuery(query.toString());
      ftpVo = new FTPInfoVO();
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_CONFIG), "ResponseServiceDAO --- getResponseFtpInfo ---  Method for checking Schedule Date Time --- Query Executed Result Set GOT--->" + rs);

      while (rs.next()) {
        if (rs.getString(1) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpAddress(rs.getString(1));
        }
        if (rs.getString(2) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPort(rs.getString(2));
        }
        if (rs.getString(3) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpUserId(rs.getString(3));
        }
        if (rs.getString(4) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpPassword(rs.getString(4));
        }
        if (rs.getString(5) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpRemotePath(rs.getString(5));
        }
        if (rs.getString(6) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFtpLocalPath(rs.getString(6));
        }
        if (rs.getString(7) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsPgp(rs.getString(7));
        }
        if (rs.getString(8) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsAllowed(rs.getString(8));
        }
        if (rs.getString(9) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePreFix(rs.getString(9));
        }
        if (rs.getString(10) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setFilePostFix(rs.getString(10));
        }
        if (rs.getString(11) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setSchemeId(rs.getString(11));
        }
        if (rs.getString(12) != null && rs.getString(1).trim().length() > 0) {
          ftpVo.setIsNullFile(rs.getString(12));
        }
      }
    }
    catch (Exception ex) {
      CommonUtilities.getLogger(instanceID, Constants.RESPONSE_SERVICE).
          log(LogLevel.getLevel(Constants.LOG_WARNING), "ResponseServiceDAO --- getResponseFtpInfo ---  Exception in checking Schedule Date Time -->" + ex);
    }
    finally {
      try {
        if (rs != null) {
          rs.close();
          rs = null;
        }
        if (stmt != null) {
          stmt.close();
          stmt = null;
        }
      }
      catch (SQLException ex1) {
      }
    }
    return ftpVo;
  }

  }
